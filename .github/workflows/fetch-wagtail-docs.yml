name: Fetch Wagtail Docs

on:
  schedule:
    # Run at midnight UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  fetch-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install files-to-prompt
          pip install requests
          pip install ttok
          
          # Verify ttok is installed correctly as a command-line tool
          echo -n "Hello world" | ttok
          
      - name: Fetch latest Wagtail release info
        id: fetch-release
        run: |
          # Create a Python script file instead of inline code
          cat > get_release.py << 'EOF'
          import requests
          import json
          import sys
          import os
          
          # First try the 'latest' API endpoint
          response = requests.get('https://api.github.com/repos/wagtail/wagtail/releases/latest')
          data = response.json()
          
          # Check if we got a valid response with tag_name
          if 'tag_name' not in data:
              print("Warning: 'tag_name' not found in latest release API response.")
              print("Response data:", json.dumps(data))
              
              # Fall back to listing all releases and picking the first one
              print("Falling back to releases list...")
              response = requests.get('https://api.github.com/repos/wagtail/wagtail/releases')
              releases = response.json()
              
              if not releases or not isinstance(releases, list) or len(releases) == 0:
                  print("Error: Could not find any releases")
                  sys.exit(1)
                  
              # First release in the list is the most recent
              data = releases[0]
              
              if 'tag_name' not in data:
                  print("Error: Could not find tag_name in any release data")
                  sys.exit(1)
          
          version = data['tag_name']
          download_url = data['zipball_url']
          
          print(f"WAGTAIL_VERSION={version}")
          print(f"WAGTAIL_DOWNLOAD_URL={download_url}")
          
          # Add to GitHub env
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              env_file.write(f"WAGTAIL_VERSION={version}\n")
              env_file.write(f"WAGTAIL_DOWNLOAD_URL={download_url}\n")
          EOF
          
          # Run the script
          python get_release.py
          
          echo "Processing Wagtail version: $WAGTAIL_VERSION"
      
      - name: Check if documentation already exists
        id: doc_exists
        run: |
          # Debug: List all files in the current directory
          echo "Files in the current directory:"
          ls -la
          
          # Check exact filename we're looking for
          echo "Checking for file: wagtail-docs-$WAGTAIL_VERSION.txt"
          
          # If file already exists, don't process
          if [ -f "wagtail-docs-$WAGTAIL_VERSION.txt" ]; then
            echo "Documentation for Wagtail $WAGTAIL_VERSION already exists, skipping."
            echo "DOC_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "Documentation file does not exist, will create it."
            echo "DOC_EXISTS=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Download and extract Wagtail
        if: steps.doc_exists.outputs.DOC_EXISTS != 'true'
        run: |
          mkdir -p temp
          curl -L "$WAGTAIL_DOWNLOAD_URL" -o temp/wagtail.zip
          unzip -q temp/wagtail.zip -d temp/
          WAGTAIL_DIR=$(ls -d temp/wagtail-wagtail-*)
          echo "WAGTAIL_DIR=$WAGTAIL_DIR" >> $GITHUB_ENV
          
      - name: Process documentation
        if: steps.doc_exists.outputs.DOC_EXISTS != 'true'
        run: |
          cd "$WAGTAIL_DIR/docs"
          echo "Processing documentation from $(pwd)"
          echo "Output will be: $GITHUB_WORKSPACE/wagtail-docs-$WAGTAIL_VERSION.txt"
          
          # List the directory contents to confirm what we're processing
          ls -la
          
          # Run the command with verbose output
          files-to-prompt ./ -e md -e rst --ignore "releases" --ignore "README.md" -c > "$GITHUB_WORKSPACE/wagtail-docs-$WAGTAIL_VERSION.txt"
          
          # Check if the file was created
          if [ -f "$GITHUB_WORKSPACE/wagtail-docs-$WAGTAIL_VERSION.txt" ]; then
            echo "Documentation file created successfully."
            ls -la "$GITHUB_WORKSPACE/wagtail-docs-$WAGTAIL_VERSION.txt"
          else
            echo "Error: Documentation file was not created!"
            exit 1
          fi
          
      - name: Clean up temporary files
        if: steps.doc_exists.outputs.DOC_EXISTS != 'true'
        run: |
          # Remove temporary files
          rm -rf temp
          
      - name: Calculate token count and update README
        if: steps.doc_exists.outputs.DOC_EXISTS != 'true'
        run: |
          # Use ttok as a command-line tool instead of a Python library
          echo "Calculating token counts for wagtail-docs-$WAGTAIL_VERSION.txt"
          
          # Calculate tokens using ttok command line
          CL100K_COUNT=$(cat "wagtail-docs-$WAGTAIL_VERSION.txt" | ttok --encoding cl100k_base)
          GPT3_COUNT=$(cat "wagtail-docs-$WAGTAIL_VERSION.txt" | ttok --encoding p50k_base)
          
          echo "Token counts - OpenAI (cl100k): $CL100K_COUNT, GPT-3 (p50k): $GPT3_COUNT"
          
          # Create Python script to update README
          cat > update_readme.py << 'EOF'
          import os
          import re
          
          wagtail_version = os.environ['WAGTAIL_VERSION']
          cl100k_count = os.environ['CL100K_COUNT']
          gpt3_count = os.environ['GPT3_COUNT']
          
          filename = f"wagtail-docs-{wagtail_version}.txt"
          token_count_msg = f'OpenAI (cl100k): {cl100k_count}, GPT-3 (p50k): {gpt3_count}'
          
          try:
              # Read README
              with open('README.md', 'r', encoding='utf-8') as f:
                  readme_content = f.read()
              
              # Create the new section content
              latest_section = "## Latest Version\n\n"
              latest_section += f"The latest version is [{wagtail_version}](./{filename})\n\n"
              latest_section += f"**Token Count:** {token_count_msg}"
              
              # Update README
              if "## Latest Version" in readme_content:
                  # Replace the existing section using regex
                  pattern = r"## Latest Version.*?(?=##|\Z)"
                  new_readme = re.sub(pattern, latest_section, readme_content, flags=re.DOTALL)
              else:
                  # Add the section if it doesn't exist
                  new_readme = readme_content + "\n\n" + latest_section
              
              # Write the updated README
              with open('README.md', 'w', encoding='utf-8') as f:
                  f.write(new_readme)
                  
              print("README updated successfully")
              
          except Exception as e:
              print(f"Error processing file: {str(e)}")
              import traceback
              traceback.print_exc()
              exit(1)
          EOF
          
          # Pass token counts to the Python script via environment variables
          export CL100K_COUNT=$CL100K_COUNT
          export GPT3_COUNT=$GPT3_COUNT
          
          # Run the script to update README
          python update_readme.py
          
      - name: Commit and push changes
        if: steps.doc_exists.outputs.DOC_EXISTS != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull the latest changes first
          git pull origin main
          
          # Check if there are changes to commit
          if git status --porcelain | grep -q "wagtail-docs-\|README.md"; then
            git add "wagtail-docs-$WAGTAIL_VERSION.txt" README.md
            git commit -m "Add documentation for Wagtail $WAGTAIL_VERSION and update README"
            
            # Push with force-with-lease to ensure we don't overwrite others' changes
            git push --force-with-lease
          else
            echo "No new documentation to commit"
          fi
