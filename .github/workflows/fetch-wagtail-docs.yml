name: Fetch Wagtail Docs

on:
  schedule:
    # Run at midnight UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  fetch-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install files-to-prompt
          pip install requests
          pip install ttok
          
      - name: Fetch latest Wagtail release info
        id: fetch-release
        run: |
          python - <<EOF
          import requests
          import json
          import sys
          import os
          
          # First try the 'latest' API endpoint
          response = requests.get('https://api.github.com/repos/wagtail/wagtail/releases/latest')
          data = response.json()
          
          # Check if we got a valid response with tag_name
          if 'tag_name' not in data:
              print("Warning: 'tag_name' not found in latest release API response.")
              print("Response data:", json.dumps(data))
              
              # Fall back to listing all releases and picking the first one
              print("Falling back to releases list...")
              response = requests.get('https://api.github.com/repos/wagtail/wagtail/releases')
              releases = response.json()
              
              if not releases or not isinstance(releases, list) or len(releases) == 0:
                  print("Error: Could not find any releases")
                  sys.exit(1)
                  
              # First release in the list is the most recent
              data = releases[0]
              
              if 'tag_name' not in data:
                  print("Error: Could not find tag_name in any release data")
                  sys.exit(1)
          
          version = data['tag_name']
          download_url = data['zipball_url']
          
          print(f"WAGTAIL_VERSION={version}")
          print(f"WAGTAIL_DOWNLOAD_URL={download_url}")
          
          # Add to GitHub env
          with open(os.environ['GITHUB_ENV'], 'a') as env_file:
              env_file.write(f"WAGTAIL_VERSION={version}\n")
              env_file.write(f"WAGTAIL_DOWNLOAD_URL={download_url}\n")
          EOF
          
          echo "Processing Wagtail version: $WAGTAIL_VERSION"
          
      - name: Download and extract Wagtail
        run: |
          mkdir -p temp
          curl -L "$WAGTAIL_DOWNLOAD_URL" -o temp/wagtail.zip
          unzip -q temp/wagtail.zip -d temp/
          WAGTAIL_DIR=$(ls -d temp/wagtail-wagtail-*)
          echo "WAGTAIL_DIR=$WAGTAIL_DIR" >> $GITHUB_ENV
          
      - name: Process documentation
        run: |
          cd "$WAGTAIL_DIR/docs"
          files-to-prompt ./ -e md -e rst --ignore "releases" --ignore "README.md" -c > "$GITHUB_WORKSPACE/wagtail-docs-$WAGTAIL_VERSION.txt"
          
      - name: Clean up and prepare commit
        run: |
          # Remove all non-README files from prior runs
          find . -type f -not -path "*/\.*" -not -name "README.md" -not -name "wagtail-docs-$WAGTAIL_VERSION.txt" -delete
          
          # If file already exists, don't overwrite
          if [ -f "wagtail-docs-$WAGTAIL_VERSION.txt" ]; then
            echo "Documentation for Wagtail $WAGTAIL_VERSION already exists, skipping."
            exit 0
          fi
          
          rm -rf temp
          
      - name: Calculate token count and update README
        run: |
          # Calculate token count using ttok
          python - <<EOF
          import ttok
          import os
          
          wagtail_version = os.environ['WAGTAIL_VERSION']
          filename = f"wagtail-docs-{wagtail_version}.txt"
          
          try:
              with open(filename, 'r', encoding='utf-8') as f:
                  content = f.read()
              
              # Get token counts for different models
              cl100k_count = ttok.tokens(content, 'cl100k_base')
              gpt3_count = ttok.tokens(content, 'p50k_base')
              
              token_count_msg = f'OpenAI (cl100k): {cl100k_count}, GPT-3 (p50k): {gpt3_count}'
              print(token_count_msg)
              
              # Update the README
              with open('README.md', 'r', encoding='utf-8') as f:
                  readme_content = f.read()
              
              latest_section = f'''## Latest Version

The latest version is [{wagtail_version}](./{filename})

**Token Count:** {token_count_msg}'''
              
              if "## Latest Version" in readme_content:
                  # Replace the existing section using Python instead of sed
                  import re
                  pattern = r"## Latest Version.*?(?=##|\Z)"
                  replacement = latest_section
                  new_readme = re.sub(pattern, replacement, readme_content, flags=re.DOTALL)
              else:
                  # Add the section if it doesn't exist
                  new_readme = readme_content + "\n\n" + latest_section
              
              with open('README.md', 'w', encoding='utf-8') as f:
                  f.write(new_readme)
                  
              print("README updated successfully")
              
          except Exception as e:
              print(f"Error processing file: {str(e)}")
              import traceback
              traceback.print_exc()
              exit(1)
          EOF
          
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Pull the latest changes first
          git pull origin main
          
          # Check if there are changes to commit
          if git status --porcelain | grep -q "wagtail-docs-\|README.md"; then
            git add "wagtail-docs-$WAGTAIL_VERSION.txt" README.md
            git commit -m "Add documentation for Wagtail $WAGTAIL_VERSION and update README"
            
            # Push with force-with-lease to ensure we don't overwrite others' changes
            git push --force-with-lease
          else
            echo "No new documentation to commit"
          fi
